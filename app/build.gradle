apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.laohu.gocdtestproject"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    def FIELD_BASE_URL = "BASE_URL"
    def FIELD_BUILD_NO = "BUILD_NO"
    def FIELD_GIT_COMMIT_COUNT = "GIT_COMMIT_COUNT"
    def FIELD_GIT_COMMIT_HASH = "GIT_COMMIT_HASH"
    def COMMAND_GIT_COMMIT_COUNT = "git rev-list --count HEAD"
    def COMMAND_GIT_COMMIT_HASH = "git rev-parse --short HEAD"

    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            applicationIdSuffix '.dev'
            buildConfigField "String", FIELD_BASE_URL, "\"https://dev.baidu.com\""
            buildConfigField "String", FIELD_BUILD_NO, "\"${getBuildNo()}\""
            buildConfigField "String", FIELD_GIT_COMMIT_COUNT, "\"${executeGit(COMMAND_GIT_COMMIT_COUNT)}\""
            buildConfigField "String", FIELD_GIT_COMMIT_HASH, "\"${executeGit(COMMAND_GIT_COMMIT_HASH)}\""
        }
        qa {
            dimension "environment"
            applicationIdSuffix '.qa'
            buildConfigField "String", FIELD_BASE_URL, "\"https://qa.baidu.com\""
            buildConfigField "String", FIELD_BUILD_NO, "\"${getBuildNo()}\""
            buildConfigField "String", FIELD_GIT_COMMIT_COUNT, "\"${executeGit(COMMAND_GIT_COMMIT_COUNT)}\""
            buildConfigField "String", FIELD_GIT_COMMIT_HASH, "\"${executeGit(COMMAND_GIT_COMMIT_HASH)}\""
        }
        prod {
            dimension "environment"
            buildConfigField "String", FIELD_BASE_URL, "\"https://prod.baidu.com\""
            buildConfigField "String", FIELD_BUILD_NO, "\"${getBuildNo()}\""
            buildConfigField "String", FIELD_GIT_COMMIT_COUNT, "\"${executeGit(COMMAND_GIT_COMMIT_COUNT)}\""
            buildConfigField "String", FIELD_GIT_COMMIT_HASH, "\"${executeGit(COMMAND_GIT_COMMIT_HASH)}\""
        }
    }
}

def executeGit(git) {
    def out = new ByteArrayOutputStream()
    def command = git.split(" ")
    println(command)
    exec {
        commandLine = command
        standardOutput = out
    }
    return out.toString().trim()
}

def getBuildNo() {
    if (project.hasProperty("buildNo")) {
        return project.property("buildNo")
    } else {
        return 'None'
    }
}

def getGitHash() {
    return executeGit("git rev-parse --short HEAD")
}

afterEvaluate {
    android.applicationVariants.all { variant ->

        variant.outputs.all {
            if(outputFileName != null && outputFileName.endsWith('.apk')) {
//                outputFileName = "app-${variant.flavorName}-${variant.buildType.name}-n${getBuildNo()}-${getGitHash()}.apk"
                outputFileName = "app-${variant.flavorName}-${variant.buildType.name}-n${getBuildNo()}.apk"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
